Use Case
========

This use case description shows all necessary steps to execute a recipe that
posts every new Instagram photo including the caption to Twitter starting from
a fresh installed daisychain server instance.

Setup
-----

-   Install the Instagram channel::

        c = Channel(name="Instagram").save()
        t1 = Trigger(channel=c, trigger_type=TRIGGER_NEW_PHOTO).save()
        t2 = Trigger(channel=c, trigger_type=TRIGGER_NEW_PHOTO_WITH_HASHTAG).save()
        t3 = Trigger(channel=c, trigger_type=TRIGGER_NEW_VIDEO).save()
        TriggerOutput(trigger=t1, name="description", mime_type="text").save()
        TriggerOutput(trigger=t1, name="image_hd", mime_type="image").save()
        TriggerOutput(trigger=t1, name="image_sd", mime_type="image").save()
        TriggerOutput(trigger=t1, name="hashtags", mime_type="text[]").save()
        (...)
        TriggerOutput(trigger=t3, name="description", mime_type="text").save()
        TriggerOutput(trigger=t3, name="video_hd", mime_type="video").save()

-   Install the Twitter channel::

        c = Channel(name="twitter").save()
        a1 = Action(channel=c, action_type=ActionType.post_status).save()
        a2 = Action(channel=c, action_type=ActionType.post_image).save()
        a3 = Action(channel=c, action_type=ActionType.post_image_with_text).save()
        ActionInput(action=a1, name="text_data", mime_type="text").save()
        ActionInput(action=a2, name="image_data", mime_type="image").save()
        ActionInput(action=a3, name="text_data", mime_type="text").save()
        ActionInput(action=a3, name="image_data", mime_type="image").save()

Recipe creation
---------------

-   User chooses a trigger channel (Instagram)

    -   | OAuth, if necessary, i.e. redirect to channel page
          ``/<channelname>/authenticate?next=<current_url>``
        | ... OAuth-Flow ...
        | Redirect to <current_url>

-   User chooses a trigger (``TRIGGER_NEW_PHOTO``)

-   User defines the values for trigger input (e.g. the hashtag which has to
    be in the caption), not needed in this use case

-   User chooses an action channel (Twitter)

    -   OAuth, if necessary, see above

-   User chooses an action (``ActionType.post_image_with_text``)

-   User defines values for action mappings

    -   For each action input of the chosen action there will be displayed one
        input field where trigger outputs of the chosen trigger can be selected
        and for specific fields can be extended with generic text. These
        mappings are stored with the recipe

-   The trigger channel is called so it may execute additional steps to make
    the chosen trigger possible, e.g. request additional permissions via OAuth
    or do some plausibility checks. It then should return with *confirm* or
    *cancel*

-   The action channel is called the same way.

-   Storing the recipe::

        def save_recipe(trigger_name, action_name, mappings):
            t = Trigger.objects.get(trigger)
            a = Action.objects.get(action_name)
            r = Recipe(t, a, user).save()
            for key,value in mappings:
                RecipeMapping(r, value, key).save()


Executing the recipe
--------------------

-   Trigger channel is triggered (POST request by Instagram)

-   Some API calls to Instagram to get metadata to the trigger POST request

-   Identifying the daisychain-user (based on the Instagram user ID)

-   Queue the trigger with some metadata in the core::

        user_id = <identifizierter_user>.id
        payload = do_something(<Metadaten>)
        core.core.handle_trigger("instagram", TRIGGER_NEW_PHOTO, user_id, payload)

-   core.Core.handle_trigger(...) queues the task in the Celery queue::

        core.tasks.handle_trigger(...).delay()

-   Celery worker processes trigger, i.e. executes
    core.tasks.handle_trigger(...)::

        def handle_trigger(channelid, trigger, user_id, payload):

            # Get all recipes by the user that use this trigger
            recipes = Recipe.objects.filter(user=user_id, trigger=trigger)

            # If no recipes are found, the for block will not be executed and
            # the worker terminates
            for recipe in recipes:

                # fill inputs-dictionary
                inputs = {}

                # load recipe mappings and pre fill inputs dictionary
                recipe_mappings = RecipeMapping.objects.filter(recipe=recipe)
                for mapping in recipe_mappings:
                    inputs[mapping.actionInput.name] = mapping.triggerOutput

                # get the real data from the trigger channel
                trigger_channel = recipe.trigger.channel
                inputs_filled = trigger_channel.get_trigger_inputs(trigger, user_id, payload, inputs)

                # call the action channel with the filled inputs dictionary
                action_channel = recipe.action.channel
                action_channel.handle_action(recipe.action.action_type, user_id, inputs_filled)

